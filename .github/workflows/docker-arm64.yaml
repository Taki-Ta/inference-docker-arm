name: Build ARM64 Docker Image

on:
  push:
    tags:
      - '*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Docker image tag name'
        required: false
        default: 'latest'
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-arm64:
    name: Build ARM64 Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 180
    
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/arm64

      - name: Generate image tag
        id: tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "IMAGE_TAG=${{ github.event.inputs.tag_name }}-cpu-arm64" >> $GITHUB_OUTPUT
          elif [[ "$GITHUB_REF" =~ ^refs/tags/ ]]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            echo "IMAGE_TAG=${TAG_NAME}-cpu-arm64" >> $GITHUB_OUTPUT
          else
            echo "IMAGE_TAG=latest-cpu-arm64" >> $GITHUB_OUTPUT
          fi

      - name: Build ARM64 Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: xinference/deploy/docker/cpu.Dockerfile
          platforms: linux/arm64
          push: false
          tags: xinference:${{ steps.tag.outputs.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/xinference-${{ steps.tag.outputs.IMAGE_TAG }}.tar
          build-args: |
            PIP_INDEX=https://pypi.org/simple

      - name: Compress Docker image
        run: |
          gzip /tmp/xinference-${{ steps.tag.outputs.IMAGE_TAG }}.tar
          ls -lh /tmp/xinference-${{ steps.tag.outputs.IMAGE_TAG }}.tar.gz

      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: xinference-${{ steps.tag.outputs.IMAGE_TAG }}-docker-image
          path: /tmp/xinference-${{ steps.tag.outputs.IMAGE_TAG }}.tar.gz
          retention-days: 30
          compression-level: 0

      - name: Generate image info
        run: |
          echo "🎉 ARM64 Docker镜像构建成功！" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📦 镜像信息" >> $GITHUB_STEP_SUMMARY
          echo "- **镜像标签**: xinference:${{ steps.tag.outputs.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
          echo "- **架构**: linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "- **文件大小**: $(du -h /tmp/xinference-${{ steps.tag.outputs.IMAGE_TAG }}.tar.gz | cut -f1)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📥 下载和使用方法" >> $GITHUB_STEP_SUMMARY
          echo "1. 从Actions artifacts下载镜像文件" >> $GITHUB_STEP_SUMMARY
          echo "2. 解压并加载镜像：" >> $GITHUB_STEP_SUMMARY
          echo "   \`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "   gunzip xinference-${{ steps.tag.outputs.IMAGE_TAG }}.tar.gz" >> $GITHUB_STEP_SUMMARY
          echo "   docker load < xinference-${{ steps.tag.outputs.IMAGE_TAG }}.tar" >> $GITHUB_STEP_SUMMARY
          echo "   \`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "3. 运行容器：" >> $GITHUB_STEP_SUMMARY
          echo "   \`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "   docker run -it xinference:${{ steps.tag.outputs.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
          echo "   \`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Output build summary
        run: |
          echo "🎉 ARM64 Docker镜像构建完成！"
          echo "镜像标签: xinference:${{ steps.tag.outputs.IMAGE_TAG }}"
          echo "文件位置: /tmp/xinference-${{ steps.tag.outputs.IMAGE_TAG }}.tar.gz"
          echo "下载方式: GitHub Actions Artifacts" 